##
# Build and publish docker images
# Parameters:
# `build_context` - directory with docker build context. It mast contain Dockerfile and `prepare.sh` script,
#                   that provides `version` and `repository` outputs
#

name: build-docker-image

on:
  workflow_dispatch:
    inputs:
      build_context:
        description: directory with docker build context.
        required: true

  workflow_call:
    inputs:
      build_context:
        description: directory with docker build context.
        required: true
        type: string

env:
  TARGET_CONTEXT: ${{ github.event.inputs.build_context }}

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build [ ${{ github.event.inputs.build_context }} ]
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2
      - name: Check context correctness
        run: |
          if [ -d $TARGET_CONTEXT -a -f $TARGET_CONTEXT/Dockerfile -a -x $TARGET_CONTEXT/prepare.sh ]; then
            echo "::notice ::[ $TARGET_CONTEXT ] OK"
          else
            echo "::group::Wrong build context"
            echo "::error ::$TARGET_CONTEXT is not an dirrectory?"
            echo "::error ::$TARGET_CONTEXT/Dockerfile is missing?"
            echo "::error ::$TARGET_CONTEXT/prepare.sh is not an executable?"
            echo "::endgroup::"
            exit 1
          fi

      - name: Cache Docker layers
        uses: actions/cache@v2
        env:
          CONTEXT_HASH: ${{ env.TARGET_CONTEXT }}/**
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles( env.CONTEXT_HASH ) }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.TARGET_CONTEXT }}

      - name: Prepare Artifacts
        id: artifact
        run: |
          sh $TARGET_CONTEXT/prepare.sh ${{ env.TARGET_CONTEXT }}
        # Outputs:
        # echo "::set-output name=version::$BUILD"
        # echo "::set-output name=repository::$REPOSITORY"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, tag, and push
        id: build-image
        uses: docker/build-push-action@v2
        env:
          REPOSITORY: ${{ steps.artifact.outputs.repository }}
          VERSION: ${{ steps.artifact.outputs.version }}
        with:
          context: ${{ env.TARGET_CONTEXT }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: VERSION=${{ env.VERSION }}
          tags: |
            ${{ env.REPOSITORY }}:latest
            ${{ env.REPOSITORY }}:${{ env.VERSION }}
          # ${{ env.REPOSITORY }}:${{ github.sha }}
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Build status
        env:
          REPOSITORY: ${{ steps.artifact.outputs.repository }}
          VERSION: ${{ steps.artifact.outputs.version }}
          METADATA: ${{ steps.build-image.outputs.metadata }}
        run: |
          IMAGE_NAME=$(echo $METADATA | jq -r '."image.name"')
          echo "::group::Build status"
          echo "::notice ::Build ${{ env.REPOSITORY }}:${{ env.VERSION }}"
          echo "::notice ::IMAGE: $IMAGE_NAME"
          echo "::endgroup::"
